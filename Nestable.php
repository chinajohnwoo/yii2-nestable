<?phpnamespace cszchen\nestable;use yii\jui\Widget;use yii\helpers\ArrayHelper;use yii\helpers\Html;use cszchen\nestable\NestableAsset;class Nestable extends Widget{    public $items = [];        public $listTagName = 'ol';        public $itemTagName = 'li';        public $rootClass = 'dd-raghandle';        public $listClass = 'dd-list';        public $itemClass = 'dd-item';        public $dragClass = 'dd-dragel';        public $handleClass = 'dd-handle';        public $collapsedClass = 'dd-collapsed';        public $placeClass = 'dd-placeholder';        public $emptyClass = 'dd-empty';        public $expandBtnHTML;        public $collapseBtnHTML;        public $childAttribute = 'children';        public $pkAttribute = 'id';        public $defaultIconClass = 'fa fa-arrows';        public $defaultHandleOptions = ['class' => 'dd2-handle'];        public $defaultItemOptions = ['class' => 'dd2-item'];        public $actionButtons = [];        public $actionTemplate = "{create} {view} {update} {delete}";    	public $defaultButtonOptions = [	   'data-toggle' => 'tooltip',	];        /**     * What displayed in the item;     * It can be a property name or a callback function;     * If it is a property name, will display its value in the item,     * else it will display the return value;     * function ($item) {     *     $label = '?';     *     return $label;     * }     * @var unknown     */    public $display = 'label';        protected $controller;        public function init()    {        parent::init();        $this->controller = \Yii::$app->controller->id;        $this->initDefaultButtons();        $this->clientOptions['listNodeName'] = $this->listTagName;        $this->clientOptions['itemNodeName'] = $this->itemTagName;        $this->clientOptions['rootClass'] = $this->rootClass;        $this->clientOptions['listClass'] = $this->listClass;        $this->clientOptions['itemClass'] = $this->itemClass;        $this->clientOptions['dragClass'] = $this->dragClass;        $this->clientOptions['handleClass'] = $this->handleClass;        $this->clientOptions['collapsedClass'] = $this->collapsedClass;        $this->clientOptions['placeClass'] = $this->placeClass;        $this->clientOptions['emptyClass'] = $this->emptyClass;        $this->clientOptions['expandBtnHTML'] = $this->expandBtnHTML;        $this->clientOptions['collapseBtnHTML'] = $this->collapseBtnHTML;        $this->clientOptions = array_filter($this->clientOptions);                $this->view->on(\yii\web\View::EVENT_END_BODY, function() {            NestableAsset::register($this->view);            $this->view->registerJs('$(".' . $this->rootClass . '").nestable(' . json_encode($this->clientOptions) . ')');        });        echo Html::tag('div', $this->renderItems($this->items), ['class'=>$this->rootClass]);        //echo $this->renderItems($this->items);    }        protected function renderItems($items)    {        if (!is_array($items)) {            return;        }        $html = '';        $html .= Html::beginTag($this->listTagName, ['class'=>$this->listClass]);        foreach ($items as $item) {            $options = [];//$this->defaultItemOptions;            Html::addCssClass($options, $this->itemClass . ' dd2-item' );            //unset($this->defaultItemOptions['class']);            $pk = $this->pkAttribute;            $options['data-'. $pk] = $item[$pk];            $html .= Html::beginTag($this->itemTagName, $options);            $html .= $this->renderItem($item);            if (isset($item[$this->childAttribute])) {                $html .= $this->renderItems($item[$this->childAttribute]);            }                        $html .= Html::endTag($this->itemTagName);        }        $html .= Html::endTag($this->listTagName);        return $html;    }        protected function renderItem($item)    {        $html = '';        $options = ArrayHelper::getValue($item, 'options', []);        Html::addCssClass($options, $this->handleClass . ' dd2-handle');        $options = ArrayHelper::merge($this->defaultItemOptions, $options);        $html .= Html::beginTag('div', $options);        if (isset($item['icon'])) {            $html .= Html::tag('i', '', ['class'=>$item['icon'] . ' normal-icon']);        } else {            $html .= Html::tag('i', '', ['class'=>$this->defaultIconClass . ' normal-icon']);        }        $html .= Html::tag('i', '', ['class'=>'drag-icon fa fa-arrows']);        $html .= Html::endTag('div');        $html .= Html::beginTag('div', ['class'=>'dd2-content']);        $html .= $this->getDisplay($item);        $html .= $this->renderActionButons($item);        $html .= Html::endTag('div');        return $html;    }        protected function getDisplay($item)    {        if (is_string($this->display)) {            return isset($item[$this->display]) ? $item[$this->display] : null;        } else if ($this->display instanceof \Closure) {            return call_user_func($this->display, $item);        }        return null;    }        protected function renderActionButons($item)    {        $buttons = preg_replace_callback('/\\{([\w\-\/]+)\\}/', function ($matches) use ($item) {        	$name = $matches[1];        	$pk = $this->pkAttribute;        	if (isset($this->actionButtons[$name])) {        		$button = $this->actionButtons[$name];        		if (!isset($button['url'])) {        		    $button['url'] = [$this->controller . '/' . $name];        		}        		is_array($button['url']) && $button['url'][$pk] = $item[$pk];        		$icon = isset($button['icon']) ? Html::tag('i', '', ['class'=>$button['icon']]) : '';        		$label = ArrayHelper::getValue($button, 'label', '');        		$options = ArrayHelper::merge($this->defaultButtonOptions, ArrayHelper::getValue($button, 'options', []));        		return Html::a($icon. $label, $button['url'], $options);        	} else {        		return '';        	}        }, $this->actionTemplate);        return Html::tag('div', $buttons, ['class'=>'pull-right action-buttons']);    }        protected function initDefaultButtons()    {        if (!isset($this->actionButtons['update'])) {        	$this->actionButtons['update'] = [	            'icon' => 'fa fa-pencil-square-o',	            'options' => ['title' => 'Update'],        	];        }        if (!isset($this->actionButtons['crate'])) {        	$this->actionButtons['create'] = [            	'icon' => 'fa fa-plus-square-o',            	'options' => ['title' => 'Create'],        	];        }                if (!isset($this->actionButtons['delete'])) {            $this->actionButtons['create'] = [                'icon' => 'fa fa-trash-o',                'options' => ['title' => 'Delete'],            ];        }        if (!isset($this->actionButtons['view'])) {            $this->actionButtons['create'] = [                'icon' => 'fa fa-eye',                'options' => ['title' => 'View'],            ];        }    }}